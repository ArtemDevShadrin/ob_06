# Scrum — это гибкая методология управления проектами, поддерживающая быструю и гибкую разработку продуктов. Она
# организована вокруг коротких итераций, называемых спринтами, с регулярными встречами для обсуждения прогресса и
# планирования. Scrum особенно популярен в разработке программного обеспечения.
#
# Scrum — самая популярная методология из существующих. Рассмотрим на примере разработки компьютерной игры, как она
# работает.
# Роли в Scrum
# В Scrum есть три основные роли:
#
# Владелец продукта. Он представляет интересы клиента, то есть заказчика, и также может выступать в роли представителя
# интересов пользователей. Например, если человек заказывает игру, владелец продукта, изучив интересы пользователей,
# представляет эти интересы, чтобы создать игру и успешно продать её. Владелец продукта продумал все особенности,
# механики и детали игры, которые затем передаются для разработки.
# Scrum-мастер. Он помогает команде работать с соблюдением методологии Scrum. Обычно в команде также присутствует
# проджект-менеджер, который помогает соблюдать методологию, выбранную командой или компанией. Scrum-мастер выступает в
# роли тренера, который следит за соблюдением всех правил Scrum и помогает решать возникающие проблемы.
# Команда разработчиков. Это люди, создающие игру: программисты, дизайнеры, тестировщики, которые, по сути, выполняют
# поставленные задачи.
# События в Scrum
#
# Есть пять типов Scrum-событий:
#
# Спринт. Это короткий временной интервал, в течение которого scrum-команда выполняет заданный объём работы. Работа над
# всем проектом зачастую занимает несколько месяцев, поэтому проект делится на спринты, каждый из которых составляет от
# недели до четырёх. В течение одного спринта команда решает определённую задачу.
# Планирование спринта. Перед началом спринта команда собирается, чтобы определить, какие задачи они будут решать в
# течение этого спринта (добавление в игру нового персонажа, создание новой локации и т.д.).
# Daily scrum, или ежедневная встреча. Обычно она проводится утром и длится около 15 минут. Здесь каждый участник
# команды делится своими результатами работы, рассказывает, с какими сложностями столкнулся, поясняет, какие задачи
# планирует решать в течение дня. Это и своего рода отчёт о проделанной работе, и совместный поиск решений при
# возникновении трудностей в выполнении проекта. Такое обсуждение помогает команде лучше понимать текущую ситуацию и
# эффективно планировать следующие шаги.
# Обзор спринта. По завершении спринта команда проводит обзор выполненной работы. В случае с разработкой игры это может
# быть показ новой локации или представление нового персонажа в конце недели.
# Ретроспектива спринта. На этом этапе можно обсудить, что в предыдущем спринте получилось успешно, что вызвало
# затруднения, какие моменты можно улучшить в следующем спринте и в целом подвести итоги этапа.
# Артефакты Scrum
#
# Артефакты в Scrum — это материальное представление работы или ценности. В Scrum есть три артефакта:
#
# Бэклог продукта. Это список всех задач и компонентов, необходимых для создания продукта. В нашем примере это список
# всех функций, механик, уровней и других элементов игры. Он разбит на этапы, чтобы обеспечить ясное понимание
# составляющих продукта и видеть план работ.
# Бэклог спринта. Это список задач, выбранных командой для работы в текущем спринте. Он прописывается на этапе
# планирования спринта: команда выбирает задачи из бэклога продукта и добавляет их в бэклог спринта для реализации в
# текущем периоде.
# Инкремент. Это готовая часть продукта после спринта, которую можно показывать пользователям/заказчикам.
# Таким образом, применяя Scrum, мы не планируем создание всей игры сразу. Вместо этого мы разрабатываем её поэтапно,
# регулярно проверяя, движемся ли мы в правильном направлении и что можно улучшить: для этого есть регулярные встречи и
# проверки, где можно увидеть, не отклонились ли мы от курса заказчика. При этом отдельный человек созванивается с
# заказчиком, уточняет детали, показывает промежуточные результаты работы, и заказчик предоставляет обратную связь.
#
# Мы обсуждаем сейчас правила работы в Scrum, но важно помнить, что те или иные правила существуют во всех методологиях.
# Без соблюдения правил никакая методология не будет работать.
#
# Плюсы методологии Scrum
#
# Структурированность. Scrum предлагает нам чёткую структуру ролей, событий и артефактов, что облегчает организацию
# всего проекта, и мы понимаем суть нашей работы, разделённой на этапы.
# Гибкость и адаптивность. Эти свойства позволяют быстро реагировать на изменения в проекте. Также, если у заказчика
# поменяются приоритеты и он захочет сделать акцент, к примеру, не на механиках игры, а на её внешнем виде, мы можем
# достаточно легко перейти к этому приоритету, потому что у нас есть постоянная обратная связь.
# Повышение производительности команды. У команды есть регулярные сроки и ревизии, и это способствует эффективности и
# контролю над прогрессом всего проекта.
# Минусы методологии Scrum
#
# Scrum может быть слишком сложным для крупных команд. В небольших командах Scrum работает отлично, но когда в команде
# больше 20 человек, внедрить и соблюдать его правила становится сложнее, могут потребоваться дополнительные усилия и
# инструменты контроля. Однако даже в крупных компаниях разработчиков обычно группируют в небольшие команды, каждая из
# которых работает над определённым проектом.
# Scrum требует высокой дисциплины и самоорганизации команды. Ежедневные созвоны, на которых нужно присутствовать,
# чёткие дедлайны (спринты) — всё это требует от команды повышенной дисциплины, чтобы не нарушалась структура проекта.
# Scrum не всегда подходит для проектов с высокой степенью неопределённости. Scrum очень структурный, и если проект
# постоянно изменяется, технология Scrum здесь может не подойти.